import { Mixpanel } from 'mixpanel-react-native';import { isInDevEnvironment, getEnvironmentName } from '../utils/environment';import {APP_CONFIG} from '../config/appConfig';let mixpanel = null;const getAnalyticsConfig = () => {  if (isInDevEnvironment()) {    return {      token: APP_CONFIG.MIXPANEL_TOKEN,      isDevEnvironment: true,    };  }  return {    token: APP_CONFIG.MIXPANEL_TOKEN,    isDevEnvironment: false,  };};const ensureAnalyticsInitialized = operation => {  if (!mixpanel) {    console.warn(`Analytics: Cannot ${operation} - analytics not initialized`);    return false;  }  return true;};export const AnalyticsEvents = Object.freeze({  APP_FIRST_INSTALL: 'app_first_install',  APP_OPEN: 'app_open',  USER_SIGNUP: 'user_signup',  USER_LOGIN: 'user_login',  PIECE_ADDED_TO_CLOSET: 'piece_added_to_closet',  PIECE_UPLOAD: 'piece_upload',  COLLECTION_CREATE: 'collection_create',  COLLECTION_VIEW: 'collection_view',  FIT_CREATE: 'fit_create',  FIT_VIEW: 'fit_view',  SUBSCRIPTION_MODAL_OPEN: 'subscription_modal_open',  SUBSCRIPTION_PURCHASE_START: 'subscription_purchase_start',  SUBSCRIPTION_PURCHASE_COMPLETE: 'subscription_purchase_complete',});export const AnalyticsParams = Object.freeze({  PIECE_ID: 'piece_id',  PIECE_NAME: 'piece_name',  PIECE_CATEGORY: 'piece_category',  PIECE_TYPE: 'piece_type',  PIECE_BRAND: 'piece_brand',  COLLECTION_ID: 'collection_id',  COLLECTION_NAME: 'collection_name',  FIT_NAME: 'fit_name',  SUBSCRIPTION_TYPE: 'subscription_type',  SUBSCRIPTION_PRICE: 'price',  SUBSCRIPTION_CURRENCY: 'currency',  SUBSCRIPTION_PERIOD: 'period',  TRANSACTION_ID: 'transaction_id',  PRODUCT_ID: 'product_id',  PURCHASE_DATE: 'purchase_date',});export const initializeAnalytics = async () => {  try {    if (mixpanel) {      console.log('Analytics: Analytics already initialized');      return true;    }    const config = getAnalyticsConfig();    const environment = getEnvironmentName();    mixpanel = new Mixpanel(config.token, false);    await mixpanel.init();    if (config.isDevEnvironment) {      mixpanel.setLoggingEnabled(true);    }    mixpanel.registerSuperProperties({ environment });    console.log(      `Analytics: Initialized with ${        config.isDevEnvironment ? 'DEVELOPMENT' : 'PRODUCTION'      } token for environment: ${environment}`,    );    return true;  } catch (error) {    console.error('Analytics: Failed to initialize Analytics', error.message);    return false;  }};export const trackEvent = (eventName, params) => {  try {    if (!ensureAnalyticsInitialized('track event')) {      return;    }    mixpanel.track(eventName, params);    console.log(`Analytics: Event tracked - ${eventName}`, params);  } catch (error) {    console.error(`Analytics: Failed to track event - ${eventName}`, error.message);  }};export const identifyUser = async userId => {  try {    if (!ensureAnalyticsInitialized('identify user')) {      return;    }    if (userId) {      await mixpanel.identify(userId);      console.log(`Analytics: User identified - ${userId}`);    }  } catch (error) {    console.error(`Analytics: Failed to identify user - ${userId}`, error.message);  }};export const setUserProperties = properties => {  try {    if (!ensureAnalyticsInitialized('set properties')) {      return;    }    const validProperties = Object.entries(properties)      .filter(([_, value]) => value !== null)      .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {});    mixpanel.getPeople().set(validProperties);    mixpanel.registerSuperProperties(validProperties);    console.log('Analytics: User properties set', validProperties);  } catch (error) {    console.error('Analytics: Failed to set user properties', error.message);  }};export const resetAnalyticsData = () => {  try {    if (!ensureAnalyticsInitialized('reset data')) {      return;    }    mixpanel.reset();    console.log('Analytics: Analytics data reset');  } catch (error) {    console.error('Analytics: Failed to reset analytics data', error.message);  }};export const EventPrefixes = Object.freeze({  ONBOARDING_STEP: 'onboarding_step_',  HOW_TO_UPLOAD: 'how_to_upload_',  SUBSCRIPTION: 'subscription_',});export const getOnboardingStepEvent = step =>  `${EventPrefixes.ONBOARDING_STEP}${step.toLowerCase()}`;export const trackOnboardingStep = (step, params) => {  const eventName = getOnboardingStepEvent(step);  trackEvent(eventName, params);};export const trackSubscriptionModalOpen = () => {  trackEvent(AnalyticsEvents.SUBSCRIPTION_MODAL_OPEN);};export const trackSubscriptionPurchaseStart = pkg => {  if (!pkg?.product) {return;}  const params = {    [AnalyticsParams.SUBSCRIPTION_TYPE]: pkg.packageType,    [AnalyticsParams.SUBSCRIPTION_PRICE]: pkg.product.price,    [AnalyticsParams.SUBSCRIPTION_CURRENCY]: pkg.product.currencyCode,    [AnalyticsParams.PRODUCT_ID]: pkg.product.identifier,  };  trackEvent(AnalyticsEvents.SUBSCRIPTION_PURCHASE_START, params);};export const trackSubscriptionPurchaseComplete = purchaseResult => {  if (!purchaseResult) {return;}  const { productIdentifier, transaction } = purchaseResult;  const isMonthly = productIdentifier?.includes('Monthly');  const isYearly = productIdentifier?.includes('Yearly');  const params = {    [AnalyticsParams.SUBSCRIPTION_TYPE]: isYearly ? 'ANNUAL' : isMonthly ? 'MONTHLY' : 'UNKNOWN',    [AnalyticsParams.PRODUCT_ID]: productIdentifier,    [AnalyticsParams.TRANSACTION_ID]: transaction?.transactionIdentifier,    [AnalyticsParams.PURCHASE_DATE]: transaction?.purchaseDate,  };  trackEvent(AnalyticsEvents.SUBSCRIPTION_PURCHASE_COMPLETE, params);};export const getHowToUploadEvent = action =>  `${EventPrefixes.HOW_TO_UPLOAD}${action.toLowerCase()}`;export const startTimedEvent = eventName => {  if (!ensureAnalyticsInitialized('start timed event')) {    return;  }  mixpanel.timeEvent(eventName);  console.log(`Analytics: Started timed event - ${eventName}`);};export const identifyUserFromProfile = async (profile, authMethod, isNewUser = false) => {  try {    if (!profile) {      console.warn('Analytics: Cannot identify user - no profile data provided');      return;    }    const userEmail = profile.email;    const userId = profile.id;    if (userEmail) {      await identifyUser(userEmail);    } else if (userId) {      await identifyUser(String(userId));    }    setUserProperties({      email: profile.email,      user_id: String(profile.id),      auth_method: authMethod,      is_new_user: isNewUser,      has_verified_email: profile.emailVerified,      has_verified_phone: profile.phoneVerified,    });  } catch (error) {    console.error('Analytics: Error identifying user from profile', error.message);  }};export const trackSignup = authMethod => {  trackEvent(AnalyticsEvents.USER_SIGNUP, {    auth_method: authMethod,  });};export const trackLogin = authMethod => {  trackEvent(AnalyticsEvents.USER_LOGIN, {    auth_method: authMethod,  });};export const trackPieceAddedToCloset = (id, formData) => {  if (!id || !formData) {    return;  }  trackEvent(AnalyticsEvents.PIECE_ADDED_TO_CLOSET, {    [AnalyticsParams.PIECE_ID]: id,    [AnalyticsParams.PIECE_NAME]: formData.name,    [AnalyticsParams.PIECE_CATEGORY]: formData.category,    [AnalyticsParams.PIECE_TYPE]: formData.type,    [AnalyticsParams.PIECE_BRAND]: formData.brand,  });};export const trackCollectionCreate = (collectionId, collectionName) => {  trackEvent(AnalyticsEvents.COLLECTION_CREATE, {    [AnalyticsParams.COLLECTION_ID]: collectionId,    [AnalyticsParams.COLLECTION_NAME]: collectionName,  });};export const trackCollectionView = (collectionId, collectionName) => {  trackEvent(AnalyticsEvents.COLLECTION_VIEW, {    [AnalyticsParams.COLLECTION_ID]: collectionId,    [AnalyticsParams.COLLECTION_NAME]: collectionName,  });};export const trackFitCreate = () => {  trackEvent(AnalyticsEvents.FIT_CREATE);};export const trackFitView = fitId => {  trackEvent(AnalyticsEvents.FIT_VIEW, {    [AnalyticsParams.FIT_ID]: fitId,  });};export const trackPieceUpload = () => {  trackEvent(AnalyticsEvents.PIECE_UPLOAD);};export const trackAppOpen = () => {  trackEvent(AnalyticsEvents.APP_OPEN);};export default {  initialize: initializeAnalytics,  trackEvent,  identifyUser,  setUserProperties,  resetAnalyticsData,  trackOnboardingStep,  startTimedEvent,  trackAppOpen,  AnalyticsEvents,  AnalyticsParams,  identifyUserFromProfile,  trackSignup,  trackLogin,  trackPieceAddedToCloset,  trackCollectionCreate,  trackCollectionView,  trackFitCreate,  trackFitView,  trackPieceUpload,};