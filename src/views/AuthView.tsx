import React, {useEffect, useState} from 'react';import {useTheme} from 'react-native-paper';import {View, StyleSheet, TouchableOpacity, Alert} from 'react-native';import {Text} from 'react-native-paper';import Icon from 'react-native-vector-icons/MaterialIcons';import EmailInput from '../components/EmailInput';import PhoneInput from '../components/PhoneInput';import GoogleSignInButton from '../components/GoogleSignInButton';import AppleSignInButton from '../components/AppleSignInButton';import VerifyCode from '../components/VerifyCode';import {getClientType, isIOS} from '../utils/platformUtils';import {navigate} from '../navigation/navigationService';import {ApiMessageType, ScreenType} from '../utils/enums';import {dispatchMessageTypeThunk, dispatchThunk} from '../utils/reduxUtils';import {useDispatch} from 'react-redux';import {   thirdPartyAuthenticate,   sendCode,   verifyCode,} from '../redux/features/authSlice';import {   setAuthInfo,   setVerificationToken,} from '../redux/features/sessionSlice';import LoadingWrapper from '../components/LoadingWrapper';import {identifyUserFromProfile, trackLogin, trackSignup} from '../lib/analytics';import {NativeModules} from 'react-native';const {TikTokEventsManager} = NativeModules;function handleTracking(authInfo, authMethod) {   console.log('handleTracking', authInfo);   identifyUserFromProfile(authInfo.profile, authMethod, authInfo.newUser);   if (authInfo.newUser) {      trackSignup(authMethod);   }   else {      trackLogin(authMethod);   }   TikTokEventsManager?.logEvent('login', {      method: authMethod,      email_address: authInfo.profile.email,    });   const profile = authInfo.profile;   if (profile) {      TikTokEventsManager.logout();      TikTokEventsManager?.identify(String(profile.id), profile.email, profile.phoneCountryCode + profile.phoneNumber, profile.email);   }}const AuthView = () => {   const {colors} = useTheme();   const dispatch = useDispatch();   const [status, setStatus] = useState('');   const [loading, setLoading] = useState(false);   const [authMethod, setAuthMethod] = useState('email');   const [isCodeSent, setIsCodeSent] = useState(false);   const [email, setEmail] = useState('');   const [phone, setPhone] = useState('');   const handleAppError = error => {      Alert.alert(error.message);   };   const handleLoginWithApple = async userInfo => {      console.log(userInfo);      setLoading(true);      dispatchMessageTypeThunk(         thirdPartyAuthenticate,         {            clientType: getClientType(),            thirdPartyJwt: userInfo.identityToken,            thirdPartyLoginType: 'APPLE',         },         arg => {            handleTracking(arg, 'APPLE');            navigate(ScreenType.MAIN);         },         error => {            navigate(ScreenType.ENTRY);            Alert.alert('Login failed', error.message);         },      ).finally(() => setLoading(false));   };   const handleLoginWithGoogle = async userInfo => {      setLoading(true);      dispatchMessageTypeThunk(         thirdPartyAuthenticate,         {            clientType: getClientType(),            thirdPartyJwt: userInfo.idToken,            thirdPartyLoginType: 'GOOGLE',         },         arg => {            handleTracking(arg, 'GOOGLE');            navigate(ScreenType.MAIN);         },         error => {            navigate(ScreenType.ENTRY);            Alert.alert('Login failed', error.message);         },      ).finally(() => setLoading(false));   };   const submitEmail = async emailValue => {      console.log('Email submitted:', emailValue);      setEmail(emailValue);      await dispatchThunk(         sendCode,         ApiMessageType.SEND_EMAIL_CODE,         {email: emailValue},         () => setIsCodeSent(true),         error => {            Alert.alert('Login failed', error.message);         },      );   };   const submitPhone = async phoneValue => {      console.log('Phone submitted:', phoneValue);      setPhone(phoneValue);      await dispatchThunk(         sendCode,         ApiMessageType.SEND_PHONE_CODE,         {phone: phoneValue},         () => setIsCodeSent(true),         error => {            Alert.alert('Login failed', error.message);         },      );   };   const handleVerifyCode = async code => {      console.log('Verifying code:', code);      setLoading(true);      dispatchThunk(         verifyCode,         authMethod === 'email'            ? ApiMessageType.VERIFY_EMAIL_CODE            : ApiMessageType.VERIFY_PHONE_CODE,         {code},         arg => {            dispatch(setVerificationToken(arg.verificationToken));            let authInfo = arg.authInfo;            dispatch(setAuthInfo(authInfo));            handleTracking(authInfo, authMethod);            navigate(ScreenType.MAIN);         },         error => {            console.error('Code verification failed:', error);            Alert.alert('Code verification failed', error);         },      ).finally(() => setLoading(false));   };   const resendCode = () => {      console.log('Code resent');      authMethod === 'email' ? submitEmail(email) : submitPhone(phone);   };   const googleCancel = info => {      console.log('Google Sign In : ', info);   };   const googleError = error => {      console.log('Google Sign In : ', error);   };   return (      <LoadingWrapper         loading={loading}         content={            isCodeSent ? (               <View>                  <Text                     style={{                        fontSize: 16,                        fontWeight: 'bold',                        marginTop: 20,                        marginBottom: 5,                     }}>                     Please enter the code sent to your{' '}                     {authMethod === 'email' ? 'Email' : 'Phone'}                  </Text>                  <VerifyCode                     onVerifyCode={code => {                        handleVerifyCode(code);                     }}                     onResendCode={() => resendCode()}                     status={status}                  />               </View>            ) : (               <View>                  {}                  <Text                     style={{                        fontSize: 16,                        fontWeight: 'bold',                        marginTop: 20,                        marginBottom: 5,                     }}>                     Please enter                  </Text>                  <View style={styles.selectionContainer}>                     <TouchableOpacity                        onPress={() => setAuthMethod('email')}                        style={[                           styles.option,                           authMethod === 'email' && styles.selectedOption,                        ]}>                        <Icon                           name="email"                           size={32}                           color={authMethod === 'email' ? colors.primary : colors.gray}                        />                        <Text style={styles.optionText}>Email</Text>                     </TouchableOpacity>                     <TouchableOpacity                        onPress={() => setAuthMethod('phone')}                        style={[                           styles.option,                           authMethod === 'phone' && styles.selectedOption,                        ]}>                        <Icon                           name="phone"                           size={32}                           color={authMethod === 'phone' ? colors.primary : colors.gray}                        />                        <Text style={styles.optionText}>Phone</Text>                     </TouchableOpacity>                  </View>                  <View style={styles.inputContainer}>                     {authMethod === 'email' ? (                        <EmailInput onSubmit={email => submitEmail(email)}/>                     ) : (                        <PhoneInput onSubmit={phone => submitPhone(phone)}/>                     )}                  </View>                  {}                  <Text style={styles.orSeparator}>──────── or ────────</Text>                  {}                  <Text                     style={{                        fontSize: 16,                        fontWeight: 'bold',                        textAlign: 'left',                        marginBottom: 10,                     }}>                     Continue with                  </Text>                  <View style={{padding: 10}}>                     <GoogleSignInButton                        style={{marginBottom: 10}}                        onSuccess={handleLoginWithGoogle}                        onError={googleError}                        onCancel={googleCancel}                     />                     {isIOS() && (<AppleSignInButton                        onSuccess={handleLoginWithApple}                        onError={handleAppError}                     />)}                  </View>               </View>            )         }      />   );};export default AuthView;const styles = StyleSheet.create({   container: {      flex: 1,      padding: 20,      justifyContent: 'center',      backgroundColor: '#f5f5f5',   },   selectionContainer: {      flexDirection: 'row',      justifyContent: 'center',      marginBottom: 20,   },   option: {      alignItems: 'center',      marginHorizontal: 20,      paddingVertical: 10,   },   selectedOption: {      borderBottomWidth: 2,      borderBottomColor: 'blue',   },   inputContainer: {      width: '100%',      marginBottom: 20,   },   orSeparator: {      fontSize: 16,      fontWeight: 'bold',      color: '#777',      textAlign: 'center',      marginVertical: 20,   },   socialContainer: {      flexDirection: 'column',      alignItems: 'center',      width: '100%',      justifyContent: 'center',    },   socialButton: {      width: '100%',       marginVertical: 10,      paddingHorizontal: 20,   },});